{"version":3,"file":"static/iframe.73dfb14956d0b526bcc7.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["import React from 'react';\nimport escapeRegExp from 'lodash.escaperegexp';\nimport PropTypes from 'prop-types';\n\nexport default class Substring extends React.PureComponent {\n    static propTypes = {\n        /**  Main content as string */\n        children: PropTypes.string,\n\n        /**  Array on Substring objects */\n        substrings: PropTypes.arrayOf(\n            PropTypes.shape({\n                /** Pattern to search substrings for processing */\n                match: PropTypes.oneOfType([\n                    PropTypes.instanceOf(RegExp),\n                    PropTypes.string,\n                    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.instanceOf(RegExp), PropTypes.string])),\n                ]).isRequired,\n\n                /** React component or tag name taking matching content. (Default tag `mark`) */\n                component: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n                /** If use match as string - it allows to switch on case sensitive search substring (Default: `false`) */\n                caseSensitive: PropTypes.bool,\n\n                /** Additional props for matching component (can use `style`, `className` or something else) */\n                props: PropTypes.object,\n            })\n        ).isRequired,\n\n        /** Tag name passed to document.createElement to create the outer container element. */\n        outerTagName: PropTypes.string,\n\n        /** Optional inline style to attach to outermost element. */\n        style: PropTypes.object,\n\n        /** Optional CSS class to attach to outermost element. */\n        className: PropTypes.object,\n    };\n\n    static defaultProps = {\n        outerTagName: 'span',\n    };\n\n    processContent(content, substrings) {\n        let contentParts = [content];\n\n        let key = 0;\n        substrings.forEach(({ match, component: Component, caseSensitive, props }) => {\n            props = props || {};\n            Component = Component || 'mark';\n\n            if (!Array.isArray(match)) {\n                match = [match];\n            }\n\n            match.forEach(matchItem => {\n                if (!matchItem) {\n                    return;\n                }\n                let midResult = [];\n                contentParts.forEach(contentPart => {\n                    //Work only with string - another ones are React elements\n                    if (typeof contentPart === 'string') {\n                        if (typeof matchItem === 'string') {\n                            let modificators = 'g';\n                            if (caseSensitive !== true) {\n                                modificators += 'i';\n                            }\n                            matchItem = new RegExp(escapeRegExp(matchItem), modificators);\n                        }\n\n                        let matchResult;\n                        let startIndex = 0;\n                        let lastIndex = 0;\n                        let prevFrom;\n                        while ((matchResult = matchItem.exec(contentPart))) {\n                            const from = matchResult.index;\n                            if (prevFrom === undefined) {\n                                prevFrom = from;\n                            } else {\n                                if (prevFrom === from) {\n                                    break;\n                                } else {\n                                    prevFrom = from;\n                                }\n                            }\n                            const to = matchItem.lastIndex || from + matchResult[0].length;\n\n                            const beforeString = contentPart.slice(startIndex, from);\n                            if (beforeString) {\n                                midResult.push(beforeString);\n                            }\n                            const matchSubstring = contentPart.slice(from, to);\n                            startIndex = to;\n                            lastIndex = to;\n\n                            midResult.push(\n                                <Component key={key++} {...props}>\n                                    {matchSubstring}\n                                </Component>\n                            );\n                        }\n                        const afterString = contentPart.slice(lastIndex);\n                        if (afterString) {\n                            midResult.push(afterString);\n                        }\n                    } else {\n                        midResult.push(contentPart);\n                    }\n                });\n                contentParts = midResult;\n            });\n        });\n\n        return contentParts;\n    }\n\n    render() {\n        const { children: content, substrings, className, style, outerTagName: ResultComponent } = this.props;\n\n        return (\n            <ResultComponent className={className} style={style}>\n                {this.processContent(content, substrings)}\n            </ResultComponent>\n        );\n    }\n}\n"],"mappings":"AAIA","sourceRoot":""}