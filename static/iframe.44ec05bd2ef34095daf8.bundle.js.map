{"version":3,"file":"static/iframe.44ec05bd2ef34095daf8.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["// @flow\n\nimport React from 'react';\nimport escapeRegExp from 'lodash.escaperegexp';\n\ntype SubstringObject = {\n    match: string | RegExp,\n    component: React.Component,\n    caseSensitive?: boolean,\n};\n\ntype Props = {\n    /** Content string to search substrings.*/\n    children: string,\n    substrings: Array<SubstringObject>,\n};\n\nexport default class Substring extends React.Component<Props> {\n    render() {\n        const { children: content, substrings } = this.props;\n\n        let contentParts = [content];\n\n        let key = 0;\n        substrings.forEach(({ match, component: Component, caseSensitive }) => {\n            if (!Array.isArray(match)) {\n                match = [match];\n            }\n\n            match.forEach(matchItem => {\n                let midResult = [];\n                contentParts.forEach((contentPart, idx) => {\n                    //Обрабатываем только строки - остальные части это реакторвские объекты\n                    if (typeof contentPart === 'string') {\n                        if (typeof matchItem === 'string') {\n                            let modificators = 'g';\n                            if (caseSensitive !== true) {\n                                modificators += 'i';\n                            }\n                            matchItem = new RegExp(escapeRegExp(matchItem), modificators);\n                        }\n\n                        let matchResult;\n                        let startIndex = 0;\n                        let lastIndex = 0;\n                        while ((matchResult = matchItem.exec(contentPart))) {\n                            const from = matchResult.index;\n                            const to = matchItem.lastIndex;\n\n                            const beforeString = contentPart.slice(startIndex, from);\n                            if (beforeString) {\n                                midResult = [...midResult, beforeString];\n                            }\n                            const matchSubstring = contentPart.slice(from, to);\n                            startIndex = to;\n                            lastIndex = to;\n\n                            midResult = [...midResult, <Component key={key++}>{matchSubstring}</Component>];\n                        }\n                        const afterString = contentPart.slice(lastIndex);\n                        if (afterString) {\n                            midResult = [...midResult, afterString];\n                        }\n                    } else {\n                        midResult = [...midResult, contentPart];\n                    }\n                });\n                contentParts = midResult;\n            });\n        });\n\n        console.log(contentParts);\n\n        return <span>{contentParts}</span>;\n    }\n}\n"],"mappings":"AAiBA","sourceRoot":""}